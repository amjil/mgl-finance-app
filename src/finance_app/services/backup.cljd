(ns finance-app.services.backup
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:path/path.dart" :as path]
   ["package:path_provider/path_provider.dart" :as pathp]
   ["dart:io" :as io]
   ["package:permission_handler/permission_handler.dart" :as permission]
   ["package:sqflite/sqflite.dart" :as sqf]
   ["package:file_picker/file_picker.dart" :as picker]))
   

(defn backup []
  (let [dbpath (path/join (await (sqf/getDatabasesPath))
                          "database.db")
        dir (await (if (.-isAndroid io/Platform)
                     (pathp/getExternalStorageDirectory)
                     (pathp/getApplicationDocumentsDirectory)))
        ^permission/Permission
        perm (.storage permission/Permission)]
    (if (await (.exists dir))
      (when-not (await (.isGranted (permission/PermissionCheckShortcuts perm)))
        (await (.request perm)))
      (when (true? (await (.isGranted (.request perm))))
        (await (.create dir))))

    ;; ;;
    (await (.copy (io/File dbpath) (path/join (.-path dir) "finance.db")))))
    
(defn cleanup []
  (let [dbpath (path/join (await (sqf/getDatabasesPath))
                          "database.db")]
    (await (sqf/deleteDatabase dbpath))))
    
(defn restore [] 
  (let [dbpath (path/join (await (sqf/getDatabasesPath))
                          "database.db")
        ^picker/FilePickerResult
        result (await (-> (picker.FilePicker/platform)
                          .pickFiles))]
     (when-not (nil? result)
       (let [^io/File 
             source (io/File (-> result .-files .-single .-path))]
         (.copy source dbpath)))))
         