(ns finance-app.widgets.text-field
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:flutter/painting.dart" :as paint]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:math_expressions/math_expressions.dart" :as exp]
   [cljd.flutter.alpha2 :as f]
   [finance-app.utils.colors :as colors]
   [finance-app.states.global :as gs]))

(defn field [obscure-text hint controller read-only]
  (f/widget
   :context ctx
  ;;  (m/Expanded)
   (mgl/MongolTextField
    .style (m/TextStyle .color colors/grey-text)
    .cursorColor (-> m/Theme (.of ctx) .-primaryColor)
    .controller controller
    .obscureText obscure-text
    .decoration (m/InputDecoration
                ;;  .prefixIcon (m/Icon icon-name .color colors/grey .size 18)
                 .hintText hint
                 .hintStyle (m/TextStyle .fontSize 16 .color colors/grey)
                 .filled true
                 .hoverColor colors/green
                 .focusColor colors/text-field-border
                 .focusedBorder (-> m/Theme (.of ctx) .-inputDecorationTheme .-focusedBorder)
                 .enabledBorder (-> m/Theme (.of ctx) .-inputDecorationTheme .-enabledBorder))
    .showCursor true
    .readOnly read-only)))

(defn num-field [controller value remark]
  (f/widget
   :watch [v value 
           r remark]
   :let [p (exp/Parser)]
   (m/Container
    .decoration (m/BoxDecoration 
                 .border (m.Border/all .color m.Colors/blueAccent))
    .padding (m.EdgeInsets/symmetric .vertical 10)
    .width 60
    .child
    (m/Stack
     .children
     [(m/Align
       .alignment m.Alignment/topCenter
       .child
       (m/GestureDetector
        .onTap (fn []
                 (gs/open-floating-input controller)
                 (swap! gs/state assoc :keyboard/return-mode :single-line))
        .child
        (f/widget
         :context ctx
         :let [h (-> m/MediaQuery (.of ctx) .-size .-height)]
         (m/Container
          .height (* 0.8 h)
          .child
          (mgl/MongolText
           (if (empty? r)
             "ᠳᠠᠩᠰᠠᠨ ᠤ ᠪᠣᠰᠤᠳ ᠨᠡᠮᠡᠯᠲᠡ ᠲᠠᠢᠯᠪᠦᠷᠢ ᠪᠠᠨ ᠪᠢᠴᠢᠭᠡᠷᠡᠢ"
             r)
           .maxLines nil 
           .style (m/TextStyle .fontSize 20
                               .color (if (empty? r)
                                        colors/grey-text
                                        colors/green)
                               .fontWeight m.FontWeight/w400))))))
      (m/Align
       .alignment m.Alignment/bottomCenter
       .child
       (mgl/MongolText
        (if (empty? v)
          "0.00"
          (let [v (if (or (clojure.string/ends-with? v "+")
                          (clojure.string/ends-with? v "-")
                          (clojure.string/ends-with? v "."))
                    (str v "0")
                    v)]
            (str (.evaluate (.parse p v) exp.EvaluationType/REAL (exp/ContextModel)))))
        .style (m/TextStyle .fontSize 24
                            .color m.Colors/red)))]))))