(ns finance-app.screens.transaction
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:math_expressions/math_expressions.dart" :as exp]
   [cljd.flutter :as f]
   [mongol-date-picker.util :as picker-util]
   [finance-app.widgets.text-field :as custom-field]
   [finance-app.widgets.button :as button]
   [finance-app.widgets.num-keyboard :as num-keyboard]
   [finance-app.widgets.floating-input :as floating-input]
   [finance-app.widgets.category :as category]
   [finance-app.widgets.bottom-sheet :as bottom-sheet]
   [finance-app.utils.colors :as colors]
   [finance-app.utils.datetime :as datetime]
   [finance-app.utils.util :as util]
   [finance-app.states.global :as gs]
   [finance-app.states.transactions :as transactions]))

(declare record-editor on-add on-edit)

(defn create-record []
  (let [amount (atom nil)
        text-value (atom nil)
        picker (picker-util/default-state nil)]
    (f/widget
     :context ctx
     (record-editor amount text-value picker #(on-add ctx amount text-value picker)))))
     
(defn edit-record [id amount-value remark-value category date]
  (let [amount (atom (str amount-value))
        text-value (atom remark-value)
        picker (picker-util/default-state (DateTime/parse date))]
    (f/widget
     :context ctx
     (record-editor amount text-value picker #(on-edit ctx id amount text-value picker)))))
    
(defn record-editor [amount text-value picker num-keyboard-fn]
  (f/widget
   :context ctx
   :let [h (-> m/MediaQuery (.of ctx) .-size .-height)
         w (-> m/MediaQuery (.of ctx) .-size .-width)]
   :managed [amount-controller (m/TextEditingController .text @amount)
             text-controller (m/TextEditingController .text @text-value)]
   :watch [value amount
           text text-value
           {floating-input :floating-input} gs/state]
   :bg-watcher ([^m/TextEditingValue {input-text .-text} amount-controller]
                (reset! amount input-text))

   (m/Scaffold .resizeToAvoidBottomInset false)
   .body
   (m/SafeArea)
   (m/Stack
    .children
    [(m/LayoutBuilder
      .builder (fn [^m/BuildContext context ^m/BoxConstraints constraints]
                 (m/Column
                  .crossAxisAlignment m.CrossAxisAlignment/start
                  .children [(m/IconButton
                              .onPressed (fn [] (-> m/Navigator (.of ctx) .pop))
                              .icon (m/Icon m.Icons/keyboard_backspace))
                             (m/SizedBox .height (* 0.02 h))
                             (m/Expanded
                              .child
                              (m/Row
                               .children [(m/SizedBox .width (* 0.02 w))
                                          (m/Expanded
                                           .child
                                           (category/main-tab nil))
                                          (m/SizedBox
                                           .width (* 0.02 w)
                                           .child (m/Container
                                                   .color (-> m/Theme (.of ctx) .-canvasColor)))
                                          (m/Container
                                           .width (* 0.09 w)
                                           .color (-> m/Theme (.of ctx) .-canvasColor)
                                           .child (m/Column
                                                   .mainAxisAlignment m.MainAxisAlignment/end
                                                   .children [(m/Container
                                                               .decoration
                                                               (m/BoxDecoration .color colors/grey-text-field
                                                                                .borderRadius
                                                                                (.all m/BorderRadius (.circular m/Radius 4)))
                                                               .child
                                                               (mgl/MongolTextButton
                                                                .onPressed (fn []
                                                                             (bottom-sheet/show-datetime-picker context picker)
                                                                             nil)
                                                                .child
                                                                (m/Column
                                                                 .mainAxisAlignment m.MainAxisAlignment/center
                                                                 .crossAxisAlignment m.CrossAxisAlignment/end
                                                                 .children [(m/Icon m.Icons/calendar_month)
                                                                            (mgl/MongolText (str (get-in @picker [:hour :val]) ":" (get-in @picker [:minute :val])))])))]))
                                          (m/SizedBox .width (* 0.02 w))
                                          (custom-field/num-field text-controller amount text-value)
                                          (m/SizedBox .width (* 0.02 w))]))
                             (m/SizedBox .height (* 0.02 h))
                             (num-keyboard/keyboard amount amount-controller num-keyboard-fn)])))
     (if (true? floating-input)
       (floating-input/input-box text-value)
       (m/SizedBox))])))



(defn ^m/Widget screen [ctx]
  (create-record))
  
(defn ^m/Widget edit-screen [ctx id amount remark category date]
  (edit-record id amount remark category date))
  
(defn- get-amount-result [value]
  (let [p (exp/Parser)
        v (if (or (clojure.string/ends-with? value "+")
                  (clojure.string/ends-with? value "-")
                  (clojure.string/ends-with? value "."))
            (str value "0")
            value)]
    (.evaluate (.parse p v) exp.EvaluationType/REAL (exp/ContextModel))))

(defn on-add [ctx value remark picker-state]
  (if (empty? @value)
    (util/show-toast ctx "Zero is not accepted!")
    (let [info {:catetory_id (:curr-cate @gs/state)
                :content @remark
                :types_of (:subtype @gs/state)
                :amount (get-amount-result @value)
                :transaction_time (datetime/datetime-from-state picker-state)}]
      (transactions/create-transaction info)
      (-> m/Navigator (.of ctx) .pop))))

(defn on-edit [ctx id value remark picker-state]
  (if (empty? @value)
    (util/show-toast ctx "Zero is not accepted!")
    (let [info {:id id
                :catetory_id (:curr-cate @gs/state)
                :content @remark
                :types_of (:subtype @gs/state)
                :amount (get-amount-result @value)
                :transaction_time (datetime/datetime-from-state picker-state)}]
      (transactions/edit-transaction info)
      (-> m/Navigator (.of ctx) .pop))))
