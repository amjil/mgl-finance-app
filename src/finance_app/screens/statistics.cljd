(ns finance-app.screens.statistics
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:fl_chart/fl_chart.dart" :as chart]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter.alpha2 :as f]))
   
(def bar-gradient (m/LinearGradient .colors
                                    [(m/Color 0xFF2196F3) (m/Color 0xFF50E4FF)]
                                    .begin (.-bottomCenter m/Alignment)
                                    .end (.-topCenter m/Alignment)))

(defn ^m/Widget get-titles [^double value ^chart/TitleMeta meta]
  (let [style (m/TextStyle .color (m/Color 0xFF2196F3)
                           .fontWeight (.-bold m/FontWeight)
                           .fontSize 14)
        text (condp = (.toInt value)
               0 "Mn"
               1 "Te"
               2 "Wd"
               3 "Tu"
               4 "Fr"
               5 "St"
               6 "Sn"
               "")]
    (chart/SideTitleWidget
     .axisSide (.-axisSide meta)
     .space 4
     .child (mgl/MongolText text .style style))))
     
(defn bar-groups-data []
  (map #(chart/BarChartGroupData .x (first %)
                                  .barRods [(chart/BarChartRodData .toY (last %) .gradient bar-gradient)]
                                  .showingTooltipIndicators [0])
       [[0 8] [1 10] [2 14] [3 15] [4 13] [5 10] [6 16]]))
       
(defn bar-chart []
  (m/Container
   .height 300
   .child
   (chart/BarChart
    (chart/BarChartData
     .barTouchData
     (chart/BarTouchData
      .enabled false
      .touchTooltipData
      (chart/BarTouchTooltipData
       .tooltipBgColor (.-transparent m/Colors)
       .tooltipPadding (.-zero m/EdgeInsets)
       .tooltipMargin 8
       .getTooltipItem (fn [^chart/BarChartGroupData group,
                            ^int groupIndex,
                            ^chart/BarChartRodData rod,
                            ^int rodIndex]
                         (chart/BarTooltipItem (-> rod .-toY .round .toString)
                                               (m/TextStyle .color (m/Color 0xFF50E4FF)
                                                            .fontWeight (.-bold m/FontWeight))))))
     .titlesData (chart/FlTitlesData
                  .show true
                  .bottomTitles
                  (chart/AxisTitles
                   .sideTitles (chart/SideTitles .showTitles true .reservedSize 30
                                                 .getTitlesWidget get-titles))
                  .leftTitles (chart/AxisTitles .sideTitles (chart/SideTitles .showTitles false))
                  .topTitles (chart/AxisTitles .sideTitles (chart/SideTitles .showTitles false))
                  .rightTitles (chart/AxisTitles .sideTitles (chart/SideTitles .showTitles false)))
     .borderData (chart/FlBorderData .show false)
     .barGroups (bar-groups-data)))))
     
(defn pie-chart-item [item color selected]
  (chart/PieChartSectionData .color color
                             .value item
                             .title (str item "%")
                             .radius (if (true? selected) 60.0 50.0)
                             .titleStyle
                             (m/TextStyle
                              .fontSize (if (true? selected) 25 16)
                              .fontWeight (.-bold m/FontWeight)
                              .color m.Colors/white
                              .shadows [(m/Shadow .color (.-black m/Colors) .blurRadius 2)])))
     
(defn pie-chart []
  (let [item-index (atom -1)]
    (f/widget
     :watch [selected item-index]
     (m/Container
      .height 300
      .child
      (chart/PieChart (chart/PieChartData
                   .pieTouchData (chart/PieTouchData
                                  .touchCallback (fn [^chart/FlTouchEvent e response]
                                                   (if (or (not (.isInterestedForInteractions e))
                                                           (nil? response)
                                                           (nil? (.-touchedSection response)))
                                                     (reset! item-index -1)
                                                     (when-not (nil? (.-touchedSection response))
                                                       (reset! item-index
                                                               (.-touchedSectionIndex (.-touchedSection response)))))))
                   .borderData (chart/FlBorderData .show false)
                   .sectionsSpace 0
                   .centerSpaceRadius 40
                   .sections (map-indexed (fn [idx itm] (pie-chart-item (:val itm) (:color itm) (= idx selected)))
                                          [{:val 40 :color (m/Color 0xFF2196F3)}
                                           {:val 30 :color (m/Color 0xFFFFC300)}
                                           {:val 15 :color (m/Color 0xFF6E1BFF)}
                                           {:val 15 :color (m/Color 0xFF3BFF49)}])))))))
     
(def screen
  (f/widget
   (m/Scaffold
    .appBar nil)
   .body
   (m/SafeArea)
   (m/Column 
    .children [(bar-chart)
               (pie-chart)])))
