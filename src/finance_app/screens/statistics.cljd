(ns finance-app.screens.statistics
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:fl_chart/fl_chart.dart" :as chart]
   ["package:mongol/mongol.dart" :as mgl]
   [cljd.flutter.alpha2 :as f]
   [finance-app.states.global :as gs]))
   
(def bar-gradient (m/LinearGradient
                   .colors
                   [(m/Color 0xFF2196F3) (m/Color 0xFF50E4FF)]
                   .begin (.-bottomCenter m/Alignment)
                   .end (.-topCenter m/Alignment)))

(defn ^m/Widget get-titles [^double value ^chart/TitleMeta meta]
  (let [style (m/TextStyle
               .color (m/Color 0xFF2196F3)
               .fontWeight (.-bold m/FontWeight)
               .fontSize 14)
        text (str (.toInt value) " ᠤ ᠡᠳᠥᠷ")]
    (chart/SideTitleWidget
     .axisSide (.-axisSide meta)
     .space 4
     .child (mgl/MongolText text .style style))))
     
(defn bar-groups-data [data]
  (map #(chart/BarChartGroupData .x (first %)
                                 .barRods [(chart/BarChartRodData .toY (last %) .gradient bar-gradient)]
                                 .showingTooltipIndicators [0])
       (->> data
            (map #(into [] %))
            (sort-by first))))
       
(defn bar-chart []
  (f/widget
   :watch [{daily-sum :daily-sum} gs/state]
   (m/Container
    .height 300
    .child
    (chart/BarChart
     (chart/BarChartData
      .barTouchData
      (chart/BarTouchData
       .enabled false
       .touchTooltipData
       (chart/BarTouchTooltipData
        .tooltipBgColor (.-transparent m/Colors)
        .tooltipPadding (.-zero m/EdgeInsets)
        .tooltipMargin 8
        .getTooltipItem (fn [^chart/BarChartGroupData group,
                             ^int groupIndex,
                             ^chart/BarChartRodData rod,
                             ^int rodIndex]
                          (chart/BarTooltipItem (-> rod .-toY .toString)
                                                (m/TextStyle
                                                 .color (m/Color 0xFF50E4FF)
                                                 .fontWeight (.-bold m/FontWeight))))))
      .titlesData (chart/FlTitlesData
                   .show true
                   .bottomTitles
                   (chart/AxisTitles
                    .sideTitles (chart/SideTitles .showTitles true .reservedSize 60
                                                  .getTitlesWidget get-titles))
                   .leftTitles (chart/AxisTitles .sideTitles (chart/SideTitles .showTitles false))
                   .topTitles (chart/AxisTitles .sideTitles (chart/SideTitles .showTitles false))
                   .rightTitles (chart/AxisTitles .sideTitles (chart/SideTitles .showTitles false)))
      .borderData (chart/FlBorderData .show false)
      .barGroups (bar-groups-data daily-sum))))))
     
(defn pie-chart-item [item category color selected]
  (chart/PieChartSectionData
   .color color
   .value item
   .title (str item " " category)
   .radius (if (true? selected) 100.0 90.0)
   .titleStyle
   (m/TextStyle
    .fontSize (if (true? selected) 18 14)
    .fontWeight (.-bold m/FontWeight)
    .color m.Colors/white
    .shadows [(m/Shadow .color (.-black m/Colors) .blurRadius 2)])))
     
(defn pie-chart []
  (let [item-index (atom -1)]
    (f/widget
     :watch [{category-sum :category-sum} gs/state
             selected item-index]
     (m/Container
      .height 300)
     (m/RotatedBox
      .quarterTurns 1)
     (chart/PieChart (chart/PieChartData
                      .pieTouchData (chart/PieTouchData
                                     .touchCallback (fn [^chart/FlTouchEvent e ^chart/PieTouchResponse response]
                                                      (if (or (not (.-isInterestedForInteractions e))
                                                              (nil? response)
                                                              (nil? (.-touchedSection response)))
                                                        (reset! item-index -1)
                                                        (when-not (nil? (.-touchedSection response))
                                                          (reset! item-index
                                                                  (.-touchedSectionIndex (.-touchedSection response)))))))
                      .borderData (chart/FlBorderData .show false)
                      .sectionsSpace 0
                      .centerSpaceRadius 40
                      .sections (map-indexed (fn [idx itm] (pie-chart-item (get itm "amount")
                                                                           (get itm "category")
                                                                           (get itm "color")
                                                                           (= idx selected)))
                                             category-sum))))))
     
(defn ^m/Widget screen [ctx]
  (f/widget
   :context ctx
   :get {{{h .-height} .-size} m/MediaQuery}
   (m/Scaffold
    .appBar nil)
   .body
   (m/SafeArea)
   (m/Column
    .crossAxisAlignment m.CrossAxisAlignment/start
    .children [(m/IconButton
                .onPressed (fn [] (-> m/Navigator (.of ctx) .pop))
                .icon (m/Icon m.Icons/keyboard_backspace))
               (m/SizedBox .height (* 0.02 h))
               (m/Expanded
                .child (m/Column
                        .children [(bar-chart)
                                   (pie-chart)]))])))
