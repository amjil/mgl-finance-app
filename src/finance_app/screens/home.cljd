(ns finance-app.screens.home
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:sqflite/sqflite.dart" :as sql]
   ["package:persistent_bottom_nav_bar/persistent_tab_view.dart" :as tab]
   [cljd.flutter.alpha2 :as f]
   [mongol-date-picker.util :as picker-util]
   [finance-app.screens.transaction :as transaction-screen]
   [finance-app.screens.search :as search]
   [finance-app.widgets.custom-card :as custom-card]
   [finance-app.widgets.transaction-card :as transaction-card]
   [finance-app.widgets.bottom-sheet :as bottom-sheet]
   [finance-app.utils.themes :as themes]
   [finance-app.utils.colors :as colors]
   [finance-app.states.transactions :as transactions]
   [finance-app.states.categories :as categories]
   [finance-app.states.global :as gs]
   [finance-app.utils.datetime :as datetime]))

(def screen
  (let [picker-state (picker-util/default-state nil)]
    (f/widget
     :get [m/Navigator]
     :context ctx
     :watch [{curr-month :curr-month
              trans :trans} gs/state]
     (m/Scaffold
      .floatingActionButtonLocation m.FloatingActionButtonLocation/endContained
      .floatingActionButton
      (m/Padding
       .padding (m.EdgeInsets/only .bottom 20)
       .child
       (m/FloatingActionButton
        .onPressed (fn [] ;(dart:core/print "xxxx")
                  ;; (pref/remove-value "db-version")
                  ;; (categories/get-sub-types 1))
                  ;; (dart:core/print (await (sql/getDatabasesPath)))
                    ;;  (transactions/daily-sum)
                    ;; (dart:core/print (map #(into [] %) (:daily-sum @gs/state)))
                     (await (categories/all-categories))
                     (tab.PersistentNavBarNavigator/pushNewScreen
                      ctx
                      .screen
                      (transaction-screen/screen ctx)
                      .withNavBar false)
                     (swap! gs/state assoc :type 1)
                     (swap! gs/state assoc :subtypes (categories/get-sub-types 1))
                     (swap! gs/state assoc :subtype (-> (categories/get-sub-types 1) (first) (get "id")))
                     (swap! gs/state assoc :cates (categories/get-cates))
                     nil)
        .child (m/Icon m.Icons/add))))
     .body
     (m/SafeArea)
     (m/Padding
      .padding (.symmetric m/EdgeInsets .horizontal 16 .vertical 16))
     (m/LayoutBuilder
      .builder (fn [context ^m/BoxConstraints constraints]
                 (m/Column
                  .crossAxisAlignment m.CrossAxisAlignment/start
                  .children
                  [(m/Stack
                    .children [(m/Align
                                .alignment m.Alignment/center
                                .child (m/GestureDetector
                                        .onTap (fn [] (bottom-sheet/show-month-picker context picker-state))
                                        .child (m/Row
                                                .mainAxisAlignment m.MainAxisAlignment/center
                                                .children [(m/Icon m.Icons/calendar_month)
                                                           (m/Text
                                                            curr-month)])))
                               (m/Align
                                .alignment m.Alignment/centerRight
                                .child (m/IconButton
                                        .padding m.EdgeInsets/zero
                                        .constraints (m/BoxConstraints)
                                        .icon (m/Icon m.Icons/search)
                                        .onPressed (fn []
                                                     (swap! gs/state assoc :search-result trans)
                                                     (tab.PersistentNavBarNavigator/pushNewScreen
                                                      ctx
                                                      .screen
                                                      (search/screen ctx)
                                                      .withNavBar false)
                                                     nil)))])
                   (m/SizedBox .height (* 0.02 (.-maxHeight constraints)))
                   (m/Container
                    .height (* 0.24 (.-maxHeight constraints))
                    .padding (m.EdgeInsets/symmetric .vertical 20)
                    .decoration (m/BoxDecoration .color (-> m/Theme (.of context) .-primaryColor)
                                                 .borderRadius
                                                 (.all m/BorderRadius (.circular m/Radius 20)))
                    .child (m/Row
                            .mainAxisAlignment m.MainAxisAlignment/spaceAround
                            .children [(m/SizedBox .width (* 0.01 (.-maxWidth constraints)))
                                       (m/Column
                                        .mainAxisAlignment m.MainAxisAlignment/spaceBetween
                                        .children [(mgl/MongolText
                                                    "ᠵᠠᠷᠤᠯᠭ᠎ᠠ"
                                                    .style (m/TextStyle .fontSize 25 .color m.Colors/white .fontWeight m.FontWeight/w500))
                                                   (m/Text
                                                    "8000"
                                                    .style (m/TextStyle .fontSize 25 .color m.Colors/white .fontWeight m.FontWeight/bold))])
                                       (m/VerticalDivider .color m.Colors/white)
                                       (m/Column
                                        .mainAxisAlignment m.MainAxisAlignment/spaceBetween
                                        .children [(mgl/MongolText
                                                    "ᠣᠷᠤᠯᠭ᠎ᠠ"
                                                    .style (m/TextStyle .fontSize 25 .color m.Colors/white .fontWeight m.FontWeight/w500))
                                                   (m/Text
                                                    "10000"
                                                    .style (m/TextStyle .fontSize 25 .color m.Colors/white .fontWeight m.FontWeight/bold))])
                                       (m/VerticalDivider .color m.Colors/white)
                                       (m/Column
                                        .mainAxisAlignment m.MainAxisAlignment/spaceBetween
                                        .children [(mgl/MongolText
                                                    "ᠬᠠᠳᠠᠭᠠᠯᠠᠮᠵᠢ"
                                                    .style (m/TextStyle .fontSize 25 .color m.Colors/white .fontWeight m.FontWeight/w500))
                                                   (m/Text
                                                    "2000"
                                                    .style (m/TextStyle .fontSize 25 .color m.Colors/white .fontWeight m.FontWeight/bold))])
                                       (m/SizedBox .width (* 0.01 (.-maxWidth constraints)))]))
                   (f/widget
                    (m/Expanded)
                    (m/Padding
                     .padding (.symmetric m/EdgeInsets .vertical 20))
                    (m/Row
                     .crossAxisAlignment m.CrossAxisAlignment/start
                     .children [(m/SizedBox .width (* 0.02 (.-maxWidth constraints)))
                                (m/Expanded
                                 .child
                                 (m.ListView/separated
                                  .scrollDirection m.Axis/horizontal
                                  .itemCount (count trans)
                                  .separatorBuilder (fn [_ i] (m/SizedBox .width (* 0.01 (.-maxWidth constraints))))
                                  .itemBuilder (fn [_ i]
                                                 (transaction-card/card
                                                  (* 0.05 (.-maxHeight constraints))
                                                  (nth trans i)))))]))]))))))

